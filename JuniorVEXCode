#pragma config(Motor,  port2,           left,          tmotorServoContinuousRotation, openLoop)
#pragma config(Motor,  port3,           right,         tmotorServoContinuousRotation, openLoop, reversed)
#pragma config(Motor,  port4,           omni,          tmotorServoContinuousRotation, openLoop)
#pragma config(Motor,  port5,           liftleft,      tmotorServoContinuousRotation, openLoop)
#pragma config(Motor,  port6,           liftright,     tmotorServoContinuousRotation, openLoop, reversed)
#pragma config(Motor,  port7,           claw,          tmotorServoContinuousRotation, openLoop)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

/*---------------------------------------------------------------------------*/
/*                                                                           */
/*        Description: Competition template for VEX EDR                      */
/*                                                                           */
/*---------------------------------------------------------------------------*/

// This code is for the VEX cortex platform
#pragma platform(VEX2)

// Select Download method as "competition"
#pragma competitionControl(Competition)

//Main competition background code...do not modify!
#include "Vex_Competition_Includes.c"

/*---------------------------------------------------------------------------*/
/*                          Pre-Autonomous Functions                         */
/*                                                                           */
/*  You may want to perform some actions before the competition starts.      */
/*  Do them in the following function.  You must return from this function   */
/*  or the autonomous and usercontrol tasks will not be started.  This       */
/*  function is only called once after the cortex has been powered on and    */
/*  not every time that the robot is disabled.                               */
/*---------------------------------------------------------------------------*/

void pre_auton()
{
  // Set bStopTasksBetweenModes to false if you want to keep user created tasks
  // running between Autonomous and Driver controlled modes. You will need to
  // manage all user created tasks if set to false.
  bStopTasksBetweenModes = true;

	// Set bDisplayCompetitionStatusOnLcd to false if you don't want the LCD
	// used by the competition include file, for example, you might want
	// to display your team name on the LCD in this function.
	// bDisplayCompetitionStatusOnLcd = false;

  // All activities that occur before the competition starts
  // Example: clearing encoders, setting servo positions, ...
}

/*---------------------------------------------------------------------------*/
/*                                                                           */
/*                              Autonomous Task                              */
/*                                                                           */
/*  This task is used to control your robot during the autonomous phase of   */
/*  a VEX Competition.                                                       */
/*                                                                           */
/*  You must modify the code to add your own robot specific commands here.   */
/*---------------------------------------------------------------------------*/

task autonomous()
{

}

/*---------------------------------------------------------------------------*/
/*                                                                           */
/*                              User Control Task                            */
/*                                                                           */
/*  This task is used to control your robot during the user control phase of */
/*  a VEX Competition.                                                       */
/*                                                                           */
/*  You must modify the code to add your own robot specific commands here.   */
/*---------------------------------------------------------------------------*/

task usercontrol()
{
  // User control code here, inside the loop

  while (true)
  {

  motor[left] = vexRT(Ch3);
motor[right] = vexRT(Ch2);
motor[omni] = vexRT(Ch1);










if(vexRT[Btn6U] == 1)
{
	motor[liftleft] = 60;
	motor[liftright] = 60;
}
else if (vexRT[Btn5U] ==1)
{
	motor[liftleft] = -30;
	motor[liftright] = -70;
}
else
{
	motor[liftleft] = 0;
	motor[liftright] = 0;
}






if(vexRT [Btn6D] ==1)
{
	motor[claw] = -127;
}
else if (vexRT[Btn5D] ==1)
{
	motor[claw] = 127;
}

else
{
motor[claw] = -20;
}






  }
}
