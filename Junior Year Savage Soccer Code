#pragma config(Motor,  port2,           leftfront,     tmotorServoContinuousRotation, openLoop, driveLeft)
#pragma config(Motor,  port3,           leftback,      tmotorServoContinuousRotation, openLoop, driveLeft)
#pragma config(Motor,  port4,           rightfront,    tmotorServoContinuousRotation, openLoop, driveRight)
#pragma config(Motor,  port5,           rightback,     tmotorServoContinuousRotation, openLoop, driveRight)
#pragma config(Motor,  port6,           liftleft,      tmotorServoContinuousRotation, openLoop)
#pragma config(Motor,  port7,           claw,          tmotorServoContinuousRotation, openLoop)
#pragma config(Motor,  port8,            ,             tmotorServoContinuousRotation, openLoop)
#pragma config(Motor,  port9,           liftright,     tmotorServoContinuousRotation, openLoop)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

/*---------------------------------------------------------------------------*/
/*                                                                           */
/*        Description: Competition template for VEX EDR                      */
/*                                                                           */
/*---------------------------------------------------------------------------*/

// This code is for the VEX cortex platform
#pragma platform(VEX2)

// Select Download method as "competition"
#pragma competitionControl(Competition)

//Main competition background code...do not modify!
#include "Vex_Competition_Includes.c"

/*---------------------------------------------------------------------------*/
/*                          Pre-Autonomous Functions                         */
/*                                                                           */
/*  You may want to perform some actions before the competition starts.      */
/*  Do them in the following function.  You must return from this function   */
/*  or the autonomous and usercontrol tasks will not be started.  This       */
/*  function is only called once after the cortex has been powered on and    */
/*  not every time that the robot is disabled.                               */
/*---------------------------------------------------------------------------*/

void pre_auton()
{
  // Set bStopTasksBetweenModes to false if you want to keep user created tasks
  // running between Autonomous and Driver controlled modes. You will need to
  // manage all user created tasks if set to false.
  bStopTasksBetweenModes = true;

	// Set bDisplayCompetitionStatusOnLcd to false if you don't want the LCD
	// used by the competition include file, for example, you might want
	// to display your team name on the LCD in this function.
	// bDisplayCompetitionStatusOnLcd = false;

  // All activities that occur before the competition starts
  // Example: clearing encoders, setting servo positions, ...
}

/*---------------------------------------------------------------------------*/
/*                                                                           */
/*                              Autonomous Task                              */
/*                                                                           */
/*  This task is used to control your robot during the autonomous phase of   */
/*  a VEX Competition.                                                       */
/*                                                                           */
/*  You must modify the code to add your own robot specific commands here.   */
/*---------------------------------------------------------------------------*/

task autonomous()
{

 motor[leftfront] = 80;
	motor[leftback] = 80;
	motor[rightfront] = 80;
	motor[rightback] = 80;
	wait1Msec(950);

	motor[liftright] = -30;
  motor[liftleft] = -30;
  wait1Msec(650);

	motor[leftfront] = 65;
	motor[leftback] = 65;
	motor[rightfront] = -65;
	motor[rightback] = -65;
	wait1Msec(750);

	motor[leftfront] = 80;
	motor[leftback] = 80;
	motor[rightfront] = 80;
	motor[rightback] = 80;
	wait1Msec(900);

	motor[leftfront] = 65;
	motor[leftback] = 65;
	motor[rightfront] = -65;
	motor[rightback] = -65;
	wait1Msec(750);

	motor[leftfront] = 80;
	motor[leftback] = 80;
	motor[rightfront] = 80;
	motor[rightback] = 80;
	wait1Msec(800);

	motor[claw] = 30;




}

/*---------------------------------------------------------------------------*/
/*                                                                           */
/*                              User Control Task                            */
/*                                                                           */
/*  This task is used to control your robot during the user control phase of */
/*  a VEX Competition.                                                       */
/*                                                                           */
/*  You must modify the code to add your own robot specific commands here.   */
/*---------------------------------------------------------------------------*/

task usercontrol()
{
  // User control code here, inside the loop

  while (true)
  {
    // This is the main execution loop for the user control program.
    // Each time through the loop your program should update motor + servo
    // values based on feedback from the joysticks.

    // ........................................................................
    // Insert user code here. This is where you use the joystick values to
    // update your motors, etc.
    // ........................................................................

    // Remove this function call once you have "real" code.
  	motor[leftfront] = vexRT(Ch2);
	motor[leftback] = vexRT(Ch2);
	motor[rightfront] = vexRT(Ch3);
	motor[rightback] = vexRT(Ch3);


	if(vexRT[Btn5U] ==1)
	{
		motor[liftleft] = 45;
		motor[liftright] = 45;
	}
	else if (vexRT[Btn6U] == 1)
	{
		motor[liftleft] = -45;
		motor[liftright] = -45;

	}
	else
	{
		motor[liftleft] = 0;
		motor[liftright] = 0;
	}




	if(vexRT[Btn6D] ==1)
	{
		motor[claw] = 20;
		motor[claw] = 20;
	}
	else if (vexRT[Btn6D] == 1)
	{
		motor[claw] = -20;
		motor[claw] = -20;

	}
	else
	{
		motor[claw] = -20;
		motor[claw] = -20;
	}



  }
}
